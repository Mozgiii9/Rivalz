import random
import time
import eth_account.signers.local
import web3
from web3 import Web3, Account
from config import RPC_URL, CONTRACT_ADDRESS, CONTRACT_METHOD, CHAIN_ID


def get_logo():
    print("""
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù

–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö}, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto
""")


def menu() -> int:
    x = None
    while not x:
        print("""
1) –í–≤–µ—Å—Ç–∏ seed-—Ñ—Ä–∞–∑—É
2) –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
3) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Private Key
        """)
        x = input("-> ")
    return int(x)


def get_account_from_seed(w3: web3.Web3) -> eth_account.signers.local.LocalAccount:
    w3.eth.account.enable_unaudited_hdwallet_features()
    print("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É seed-—Ñ—Ä–∞–∑—É: ")
    phrase = input("-> ")
    try:
        account = w3.eth.account.from_mnemonic(phrase)
        print(f"–ê–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {account.address}")
        return account
    except Exception as e:
        print(e)
        main()


def get_account_from_pk(w3: web3.Web3) -> eth_account.signers.local.LocalAccount:
    w3.eth.account.enable_unaudited_hdwallet_features()
    print("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
    pk = input("-> ")
    try:
        account = w3.eth.account.from_key(pk)
        print(f"–ê–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {account.address}")
        return account
    except Exception as e:
        print(e)
        main()


def generate_account(w3: web3.Web3) -> eth_account.signers.local.LocalAccount:
    w3.eth.account.enable_unaudited_hdwallet_features()
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫...")
    account, mnemonic = w3.eth.account.create_with_mnemonic()
    print(f"–ê–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {account.address}")
    print(f"Seed —Ñ—Ä–∞–∑–∞ –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {mnemonic}")
    print(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {account.key.hex()}")
    return account


def check_eth_balance(w3: web3.Web3, account: eth_account.signers.local.LocalAccount):
    balance = w3.from_wei(w3.eth.get_balance(account.address), "ether")
    print(f"–ë–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {balance} ETH")
    if balance < 0.00001:
        print("–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ:")
        print("https://rivalz2.hub.caldera.xyz/")
        print("")
        input("–ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ Enter")
    else:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ-–∫–ª–µ–π–º–∞")


def claim_nft(w3: web3.Web3, account: eth_account.signers.local.LocalAccount):
    nonce = w3.eth.get_transaction_count(account.address)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≥–∞–∑–∞
    gas_price = w3.eth.gas_price

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞, –∫–∞–∫ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    gas_limit = 300000
    gas = w3.eth.gas

    transaction = {
        'to': CONTRACT_ADDRESS,
        'value': 0,
        'gas': gas_limit,
        'gasPrice': gas_price,
        'nonce': nonce,
        'data': CONTRACT_METHOD,
        'chainId': CHAIN_ID
    }

    try:
        signed_txn = w3.eth.account.sign_transaction(transaction, account.key)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
        print(f"NFT claim hash: {tx_hash.hex()}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")


def main() -> None:
    w3 = Web3(Web3.HTTPProvider(RPC_URL))
    if w3.is_connected():
        if (choice := menu()) == 1:
            account = get_account_from_seed(w3)
            check_eth_balance(w3, account)
        elif choice == 2:
            account = generate_account(w3)
            check_eth_balance(w3, account)
        elif choice == 3:
            account = get_account_from_pk(w3)
            check_eth_balance(w3, account)
        while True:
            print("–ù–∞—á–∏–Ω–∞–µ–º –∫–ª–µ–π–º...")
            for i in range(20):
                claim_nft(w3, account)
                print(f"{i + 1}–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–µ–π–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                time.sleep(random.randint(5, 15))
            print("–û–∂–∏–¥–∞–Ω–∏–µ 12 —á–∞—Å–æ–≤...")
            time.sleep(43260)
    else:
        print("Web3 connection failed!")
        print("Check your internet connection")


if __name__ == "__main__":
    get_logo()
    main()
